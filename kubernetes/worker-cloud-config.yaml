#cloud-config
write_files:
  - path: "/etc/kubernetes/bootstrap.env"
    permissions: 0644
    owner: root
    content: |
      K8S_VERSION=_K8S_VERSION
      ARCH=_ARCH
      DNS_SERVICE_IP=_DNS_SERVICE_IP
      TOKEN=_TOKEN
      INITIAL_ETCD_KUBE_CLUSTER=_INITIAL_ETCD_KUBE_CLUSTER
      ETCD_ENDPOINTS=_ETCD_ENDPOINTS
      MASTER_NODE=_MASTER_NODE
      NODE_NAME=_NODE_NAME
      NODE_IP=_NODE_IP
  - path: "/root/download-kube.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      set -x
      # Download Binaries
      echo "Downloading Kubernetes..."
      wget -q https://dl.k8s.io/${K8S_VERSION}/kubernetes-server-linux-${ARCH}.tar.gz

      # Extract the main tar and add it to PATH
      tar -xvf kubernetes-server-linux-${ARCH}.tar.gz

      # Drop kubelet and kube-proxy in a system wide location
      echo "Copying k8s binaries into /opt/bin/..."
      mkdir -p /opt/bin
      rsync -a kubernetes/server/bin/ /opt/bin/ --exclude *.tar --exclude *_tag
  - path: "/root/.kube/config"
    permissions: 0644
    owner: root
    content: |
      apiVersion: v1
      kind: Config
      users:
      - name: root
        user:
          token: _TOKEN
      clusters:
      - name: local
        cluster:
          server: https://_MASTER_NODE
      contexts:
      - context:
          cluster: local
          user: root
        name: service-account-context
      current-context: service-account-context
      preferences: {}
coreos:
  update:
    reboot-strategy: "etcd-lock"
    group: stable
    server: _COREOS_UPDATE_URL
  etcd2:
    proxy: on
    initial-cluster: _INITIAL_ETCD_CLUSTER
    listen-client-urls: http://0.0.0.0:2379
  locksmith:
    group: "worker"
  units:
    - name: etcd2.service
      command: start
    - name: download-kube.service
      command: start
      content: |
        [Unit]
        Description=Download Kubernetes binaries
        Documentation=https://github.com/kubernetes/kubernetes
        After=docker.service
        Requires=docker.service
        [Service]
        EnvironmentFile=/etc/kubernetes/bootstrap.env
        Type=oneshot
        ExecStart=/usr/bin/sh -c "if [ ! -d /root/kubernetes ]; then cd /root && /root/download-kube.sh; fi"
        RemainAfterExit=yes
        RestartSec=10
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=download-kube.service
        Requires=download-kube.service
        [Service]
        EnvironmentFile=/etc/kubernetes/bootstrap.env
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet/
        ExecStartPre=/usr/bin/cp /root/.kube/config /var/lib/kubelet/kubeconfig
        ExecStart=/opt/bin/kubelet \
        --address=0.0.0.0 \
        --hostname-override=${COREOS_PRIVATE_IPV4} \
        --require-kubeconfig=true \
        --healthz-bind-address=0.0.0.0 \
        --cluster-dns=${DNS_SERVICE_IP} \
        --cluster-domain=kubernetes.local \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --logtostderr=true \
        --node-labels=kubernetes.io/role="master" \
        --v=2
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes kube-proxy
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=download-kube.service
        After=download-kube.service
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kube-proxy/
        ExecStartPre=/usr/bin/cp /root/.kube/config /var/lib/kube-proxy/kubeconfig
        ExecStart=/opt/bin/kube-proxy \
        --kubeconfig=/var/lib/kube-proxy/kubeconfig
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target