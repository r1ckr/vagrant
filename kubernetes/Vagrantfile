# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

# Make sure the vagrant-ignition plugin is installed
required_plugins = %w(vagrant-ignition)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

$update_channel = "stable"
# ETCD are the nodes holding the ETCD for CoreOS
$etcd_count = 1
$etcd_vm_memory = 512
# Master nodes will have the kube-etcd, API Server, scheduler and Kube controller
$master_count = 1
$master_vm_memory = 1024
# Woker nodes will have only kubelet and kube-proxy
$worker_count = 1
$worker_vm_memory = 1024
$vb_cpuexecutioncap = 100

CONFIG = File.expand_path("config.rb")
if File.exist?(CONFIG)
  require CONFIG
end

if $worker_vm_memory < 1024
  puts "Workers should have at least 1024 MB of memory"
end

IGNITION_CONFIG_PATH = File.join(File.dirname(__FILE__), "config.ign")

CONTROLLER_CLUSTER_IP="10.3.0.1"

ETCD_CLOUD_CONFIG_PATH = File.expand_path("etcd-cloud-config.yaml")

MASTER_CLOUD_CONFIG_PATH = File.expand_path("master-cloud-config.yaml")

# CONTROLLER_CLOUD_CONFIG_PATH = File.expand_path("../generic/controller-install.sh")
WORKER_CLOUD_CONFIG_PATH = File.expand_path("worker-cloud-config.yaml")

def etcdIP(num)
  return "192.168.47.#{num+10}"
end

def masterIP(num)
  return "192.168.47.#{num+20}"
end

def workerIP(num)
  return "192.168.47.#{num+100}"
end

etcdIPs = [*1..$etcd_count].map{ |i| etcdIP(i) }
masterIPs = [*1..$master_count].map{ |i| masterIP(i) }
initial_etcd_cluster = etcdIPs.map.with_index{ |ip, i| "e#{i+1}=http://#{ip}:2380" }.join(",")
kube_initial_etcd_cluster = masterIPs.map.with_index{ |ip, i| "m#{i+1}=http://#{ip}:2390" }.join(",")
kube_etcd_endpoints = masterIPs.map.with_index{ |ip, i| "http://#{ip}:2389" }.join(",")
master_ip = masterIP(1)

# Set cert envs
local_pki_dir="easy-rsa-master/easyrsa3/pki"
kube_ssl_dir="/etc/ssl/kube"
kube_ssl_tmp_dir="/tmp/certs"

Vagrant.configure("2") do |config|

  # always use Vagrants insecure key
  config.ssh.insert_key = false
  # forward ssh agent to easily ssh into the different machines
  config.ssh.forward_agent = true

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 1520.8.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json" % $update_channel

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
    # enable ignition (this is always done on virtualbox as this is how the ssh key is added to the system)
    config.ignition.enabled = true
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  # Generate root CA and certs
  master_ips = masterIPs.map.with_index{ |ip, i| "#{ip}" }.join(",")
  system("mkdir -p ssl && ./init-ssl-ca.sh #{CONTROLLER_CLUSTER_IP},#{master_ips}") or abort ("failed generating SSL artifacts")

  (1..$etcd_count).each do |i|
    config.vm.define vm_name = "e%d" % i do |etcd|

      config.vm.hostname = vm_name

      data = YAML.load(IO.readlines(ETCD_CLOUD_CONFIG_PATH)[1..-1].join)
      data['coreos']['etcd2']['initial-cluster'] = initial_etcd_cluster
      data['coreos']['etcd2']['name'] = vm_name
      data['coreos']['etcd2']['advertise-client-urls'] = "http://"+etcdIP(i)+":2379"
      data['coreos']['etcd2']['initial-advertise-peer-urls'] = "http://"+etcdIP(i)+":2380"

      config_file = Tempfile.new('etcd_config', :binmode => true)
      config_file.write("#cloud-config\n#{data.to_yaml}")

      # new_contents = config_file.gsub("_NODE_NAME", "#{i}")
      # new_contents = config_file.gsub("_NODE_IP", "#{i}")
      # new_contents = config_file.gsub("_ETCD_INITIAL_CLUSTER", "#{i}")
      # config_file.write(new_contents)

      config_file.close

      etcd.vm.provider :virtualbox do |vb|
        vb.memory = $etcd_vm_memory
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
        config.ignition.config_obj = vb
      end

      etcd.vm.provider :virtualbox do |vb|
        config.ignition.hostname = vm_name
        config.ignition.drive_name = "etcd-config" + i.to_s
        # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
        # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
        if File.exist?(IGNITION_CONFIG_PATH)
          config.ignition.path = 'config.ign'
        end
      end

      etcd.vm.network :private_network, ip: etcdIP(i)

      etcd.ignition.ip = etcdIP(i)
      etcd.ignition.hostname = vm_name

      etcd.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
      etcd.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
      etcd.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      etcd.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true

    end
  end


  (1..$master_count).each do |i|
    config.vm.define vm_name = "m%d" % i do |master|

      config.vm.hostname = vm_name

      # Loading the user_data file to replace placeholders
      data = File.read(MASTER_CLOUD_CONFIG_PATH)
      # Replace the placeholders
      filtered_data = data.gsub("NODE_NAME", vm_name)
      filtered_data = filtered_data.gsub("KUBE_INITIAL_ETCD_CLUSTER", kube_initial_etcd_cluster)
      filtered_data = filtered_data.gsub("INITIAL_ETCD_CLUSTER", initial_etcd_cluster)
      filtered_data = filtered_data.gsub("PRIVATE_IPV4", masterIP(i))

      # Writting it to a temp file
      config_file = Tempfile.new('user_data', :binmode => true)
      config_file.write(filtered_data)
      config_file.close

      master.vm.provider :virtualbox do |vb|
        vb.memory = $master_vm_memory
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
        config.ignition.config_obj = vb
      end

      master.vm.provider :virtualbox do |vb|
        config.ignition.hostname = vm_name
        config.ignition.drive_name = "master-config" + i.to_s
        # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
        # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
        if File.exist?(IGNITION_CONFIG_PATH)
          config.ignition.path = 'config.ign'
        end
      end

      master.vm.network :private_network, ip: masterIP(i)

      master.ignition.ip = masterIP(i)
      master.ignition.hostname = vm_name

      master.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
      master.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
      master.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      master.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true

      # Environment file
      env_file = Tempfile.new('env_file', :binmode => true)
      env_file.write("ETCD_INITIAL_CLUSTER=#{kube_initial_etcd_cluster}\n")
      env_file.write("ETCD_ENDPOINTS=#{kube_etcd_endpoints}\n")
      env_file.write("MASTER_NODE=#{master_ip}\n")
      env_file.write("NODE_NAME=m#{i}\n")
      env_file.write("NODE_IP=#{masterIP(i)}\n") 
      env_file.close
      config.vm.provision :file, :source => env_file, :destination => "/tmp/bootstrap.env"

      master.vm.provision :file, :source => "master-install.sh", :destination => "/tmp/master-install.sh"
      master.vm.provision :file, :source => "dashboard.yaml", :destination => "/tmp/dashboard.yaml"

      # Copying the certs for API Server:
      master.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_tmp_dir}", :privileged => false
      master.vm.provision :file, :source => "#{local_pki_dir}/ca.crt", :destination => "#{kube_ssl_tmp_dir}/ca.crt"
      master.vm.provision :file, :source => "#{local_pki_dir}/private/server.key", :destination => "#{kube_ssl_tmp_dir}/server.key"
      master.vm.provision :file, :source => "#{local_pki_dir}/issued/server.crt", :destination => "#{kube_ssl_tmp_dir}/server.crt"
      master.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_dir} && cp #{kube_ssl_tmp_dir}/* #{kube_ssl_dir}/", :privileged => true

      # Copying CA pem for clients
      master.vm.provision :shell, :inline => "cp #{kube_ssl_tmp_dir}/ca.crt /etc/ssl/certs/kubernetes.pem && update-ca-certificates", :privileged => true


      # Copying the token auth file
      master.vm.provision :file, :source => "token-auth-file.csv", :destination => "/tmp/token-auth-file.csv"
      master.vm.provision :shell, :inline => "mkdir -p /srv/kubernetes/ && cp /tmp/token-auth-file.csv /srv/kubernetes/token-auth-file.csv", :privileged => true

      master.vm.provision :shell, :inline => "chmod +x /tmp/master-install.sh && /tmp/master-install.sh", :privileged => true
    end
  end

  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      data = YAML.load(IO.readlines(WORKER_CLOUD_CONFIG_PATH)[1..-1].join)
      data['coreos']['etcd2']['initial-cluster'] = initial_etcd_cluster
      
      config_file = Tempfile.new('worker_config', :binmode => true)
      config_file.write("#cloud-config\n#{data.to_yaml}")
      config_file.close

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
        config.ignition.config_obj = vb
      end

      worker.vm.provider :virtualbox do |vb|
        config.ignition.hostname = vm_name
        config.ignition.drive_name = "worker-config" + i.to_s
        # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
        # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
        if File.exist?(IGNITION_CONFIG_PATH)
          config.ignition.path = 'config.ign'
        end
      end

      worker.vm.network :private_network, ip: workerIP(i)

      worker.ignition.ip = workerIP(i)
      worker.ignition.hostname = vm_name

      worker.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
      worker.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
      worker.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      worker.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true
      

      # Environment file
      env_file = Tempfile.new('env_file', :binmode => true)
      env_file.write("MASTER_NODE=#{master_ip}\n")
      env_file.write("NODE_NAME=w#{i}\n") 
      env_file.write("NODE_IP=#{workerIP(i)}\n") 
      env_file.close
      config.vm.provision :file, :source => env_file, :destination => "/tmp/bootstrap.env"

      # Copying CA pem for clients
      worker.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_tmp_dir}", :privileged => false
      worker.vm.provision :file, :source => "#{local_pki_dir}/ca.crt", :destination => "#{kube_ssl_tmp_dir}/ca.crt"
      worker.vm.provision :shell, :inline => "cp #{kube_ssl_tmp_dir}/ca.crt /etc/ssl/certs/kubernetes.pem && update-ca-certificates", :privileged => true

      worker.vm.provision :file, :source => "worker-install.sh", :destination => "/tmp/worker-install.sh"
      worker.vm.provision :shell, :inline => "chmod +x /tmp/worker-install.sh && /tmp/worker-install.sh", :privileged => true
    end
  end

end
