# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

# Make sure the vagrant-ignition plugin is installed
required_plugins = %w(vagrant-ignition)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

$update_channel = "stable"
# Util VMs: currently running Coreroller
$utils_count = 0
$utils_vm_memory = 1024
# ETCD are the nodes holding the ETCD for CoreOS
$etcd_count = 0
$etcd_vm_memory = 512
# Master nodes will have the kube-etcd, API Server, scheduler and Kube controller
$master_count = 1
$master_vm_memory = 1024
# Woker nodes will have only kubelet and kube-proxy
$worker_count = 1
$worker_vm_memory = 1024
$vb_cpuexecutioncap = 100

CONFIG = File.expand_path("config.rb")
if File.exist?(CONFIG)
  require CONFIG
end

if $worker_vm_memory < 1024
  puts "Workers should have at least 1024 MB of memory"
end

IGNITION_CONFIG_PATH = File.join(File.dirname(__FILE__), "config.ign")

CONTROLLER_CLUSTER_IP="10.3.0.1"

ETCD_CLOUD_CONFIG_PATH = File.expand_path("user_data/etcd.yaml")

MASTER_CLOUD_CONFIG_PATH = File.expand_path("user_data/master.yaml")

WORKER_CLOUD_CONFIG_PATH = File.expand_path("user_data/worker.yaml")

UTILS_CLOUD_CONFIG_PATH = File.expand_path("user_data/utils.yaml")

utilsIP = "192.168.47.5"

def etcdIP(num)
  return "192.168.47.#{num+10}"
end

def masterIP(num)
  return "192.168.47.#{num+20}"
end

def workerIP(num)
  return "192.168.47.#{num+100}"
end

etcdIPs = [*1..$etcd_count].map{ |i| etcdIP(i) }
masterIPs = [*1..$master_count].map{ |i| masterIP(i) }
initial_etcd_cluster = etcdIPs.map.with_index{ |ip, i| "e#{i+1}=http://#{ip}:2380" }.join(",")
kube_initial_etcd_cluster = masterIPs.map.with_index{ |ip, i| "m#{i+1}=http://#{ip}:2390" }.join(",")
kube_etcd_endpoints = masterIPs.map.with_index{ |ip, i| "http://#{ip}:2389" }.join(",")
master_ip = masterIP(1)
coreos_update_url="http://"+utilsIP+":8000/v1/update/"

# Set cert envs
local_pki_dir="certs"
kube_ssl_dir="/etc/ssl/kube"
kube_ssl_tmp_dir="/tmp/certs"


# Kube vars:
k8s_version="v1.9.2"
dns_service_ip="10.3.0.10"
cluster_ip_range="10.3.0.0/16"
pod_network="10.1.0.0/16"
kube_token="c235d0d999cfe176d874d2161427c834"
kube_cluster_name="kubernetes-vagrant"
Vagrant.configure("2") do |config|

  # always use Vagrants insecure key
  config.ssh.insert_key = false
  # forward ssh agent to easily ssh into the different machines
  config.ssh.forward_agent = true

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 1520.8.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json" % $update_channel

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
    # enable ignition (this is always done on virtualbox as this is how the ssh key is added to the system)
    config.ignition.enabled = true
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  # Generate root CA and certs
  master_ips = masterIPs.map.with_index{ |ip, i| "#{ip}" }.join(",")
  system("./init-ssl-ca.sh #{CONTROLLER_CLUSTER_IP},#{master_ips}") or abort ("failed generating SSL artifacts")

  (1..$utils_count).each do |i|
      config.vm.define vm_name = "u%d" % i do |utils|

        config.vm.hostname = vm_name

        # Loading the user_data file to replace placeholders
        config_file = File.read(UTILS_CLOUD_CONFIG_PATH)


        utils.vm.provider :virtualbox do |vb|
          vb.memory = $utils_vm_memory
          vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
          config.ignition.config_obj = vb
        end

        utils.vm.provider :virtualbox do |vb|
          config.ignition.hostname = vm_name
          config.ignition.drive_name = "utils-config" + i.to_s
          # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
          # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
          if File.exist?(IGNITION_CONFIG_PATH)
            config.ignition.path = 'config.ign'
          end
        end

        utils.vm.network :private_network, ip: utilsIP

        utils.ignition.ip = utilsIP
        utils.ignition.hostname = vm_name

        utils.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
        utils.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
        utils.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
        utils.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true

      end
    end


  (1..$etcd_count).each do |i|
    config.vm.define vm_name = "e%d" % i do |etcd|

      config.vm.hostname = vm_name

      user_data = File.read(ETCD_CLOUD_CONFIG_PATH)
      # Replace the placeholders
      user_data = user_data.gsub("__ETCD_NODE_NAME__", vm_name)
      user_data = user_data.gsub("__INITIAL_ETCD_CLUSTER__", initial_etcd_cluster)
      user_data = user_data.gsub("__COREOS_UPDATE_URL__", coreos_update_url)

      # Writting it to a temp file
      config_file = Tempfile.new('user_data', :binmode => true)
      config_file.write(user_data)
      config_file.close

      etcd.vm.provider :virtualbox do |vb|
        vb.memory = $etcd_vm_memory
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
        config.ignition.config_obj = vb
      end

      etcd.vm.provider :virtualbox do |vb|
        config.ignition.hostname = vm_name
        config.ignition.drive_name = "etcd-config" + i.to_s
        # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
        # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
        if File.exist?(IGNITION_CONFIG_PATH)
          config.ignition.path = 'config.ign'
        end
      end

      etcd.vm.network :private_network, ip: etcdIP(i)
      etcd.ignition.ip = etcdIP(i)
      etcd.ignition.hostname = vm_name

      etcd.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
      etcd.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
      etcd.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      etcd.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true

    end
  end


  (1..$master_count).each do |i|
    config.vm.define vm_name = "m%d" % i do |master|

      config.vm.hostname = vm_name
      master.vm.provider :virtualbox do |vb|
        vb.memory = $master_vm_memory
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
        config.ignition.config_obj = vb
      end

      master.vm.provider :virtualbox do |vb|
        config.ignition.hostname = vm_name
        config.ignition.drive_name = "master-config" + i.to_s
        # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
        # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
        if File.exist?(IGNITION_CONFIG_PATH)
          config.ignition.path = 'config.ign'
        end
      end

      master.vm.network :private_network, ip: masterIP(i)
      master.ignition.ip = masterIP(i)
      master.ignition.hostname = vm_name



      kube_etcd_definition = File.read("templates/kubernetes/kube-etcd.service")
      kube_etcd_definition = kube_etcd_definition.gsub("__ETCD_NODE_NAME__", vm_name)
      kube_etcd_definition = kube_etcd_definition.gsub("__INITIAL_ETCD_KUBE_CLUSTER__", kube_initial_etcd_cluster)

      kube_apiserver_definition = File.read("templates/kubernetes/kube-apiserver.service")
      kube_apiserver_definition = kube_apiserver_definition.gsub("__SERVICE_CLUSTER_IP_RANGE__", cluster_ip_range)
      kube_apiserver_definition = kube_apiserver_definition.gsub("__API_SERVER_COUNT__", "#{$master_count}")

      kube_controller_manager_definition = File.read("templates/kubernetes/kube-controller-manager.service")
      kube_controller_manager_definition = kube_controller_manager_definition.gsub("__POD_NETWORK__", pod_network)
      kube_controller_manager_definition = kube_controller_manager_definition.gsub("__CLUSTER_NAME__", kube_cluster_name)

      kubelet_definition = File.read("templates/kubernetes/kubelet.service")
      kubelet_definition = kubelet_definition.gsub("__DNS_SERVICE_IP__", dns_service_ip)
      kubelet_definition = kubelet_definition.gsub("__NODE_ROLE__", "master")

      token_file = File.read("templates/kubernetes/token-auth-file.csv")
      token_file = token_file.gsub("__TOKEN__", kube_token)

      kubeconfig_file = File.read("templates/kubernetes/kubeconfig")
      kubeconfig_file = kubeconfig_file.gsub("__TOKEN__", kube_token)
      kubeconfig_file = kubeconfig_file.gsub("__CLUSTER_NAME__", kube_cluster_name)
      kubeconfig_file = kubeconfig_file.gsub("__KUBE_API_LB_URL__", "http://127.0.0.1:8080")

      # Loading the user_data file to replace placeholders
      user_data = File.read(MASTER_CLOUD_CONFIG_PATH)
      user_data = user_data.gsub("__INITIAL_ETCD_CLUSTER__", initial_etcd_cluster)
      user_data = user_data.gsub("__KUBE_ETCD_DEFINITION__", kube_etcd_definition)
      user_data = user_data.gsub("__KUBE_API_SERVER_DEFINITION__", kube_apiserver_definition)
      user_data = user_data.gsub("__KUBE_CONTROLLER_MANAGER_DEFINITION__", kube_controller_manager_definition)
      user_data = user_data.gsub("__KUBE_SCHEDULER_DEFINITION__", kube_controller_manager_definition)
      user_data = user_data.gsub("__KUBELET_DEFINITION__", kubelet_definition)
      user_data = user_data.gsub("__KUBE_PROXY_DEFINITION__", File.read("templates/kubernetes/kube-proxy.service"))
      user_data = user_data.gsub("__KUBECONFIG__", kubeconfig_file)
      user_data = user_data.gsub("__TOKEN_FILE__", token_file)
      user_data = user_data.gsub("__DOWNLOAD_KUBE__", File.read("templates/kubernetes/download-kube.sh"))
      user_data = user_data.gsub("__COREOS_UPDATE_URL__", coreos_update_url)
      user_data = user_data.gsub("__K8S_VERSION__", k8s_version)
      user_data = user_data.gsub("__TOKEN__", kube_token)
      user_data = user_data.gsub("__CLUSTER_NAME__", kube_cluster_name)
      user_data = user_data.gsub("__KUBE_API_LB_URL__", "https://"+masterIP(1))

      # Writting it to a temp file
      config_file = Tempfile.new('user_data', :binmode => true)
      config_file.write(user_data)
      config_file.close

      master.vm.provision :file, :source => "dashboard.yaml", :destination => "/tmp/dashboard.yaml"

      # Copying the certs for API Server:
      master.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_tmp_dir}", :privileged => false
      master.vm.provision :file, :source => "#{local_pki_dir}/ca.pem", :destination => "#{kube_ssl_tmp_dir}/ca.pem"
      master.vm.provision :file, :source => "#{local_pki_dir}/ca-key.pem", :destination => "#{kube_ssl_tmp_dir}/ca-key.pem"
      master.vm.provision :file, :source => "#{local_pki_dir}/kubernetes-key.pem", :destination => "#{kube_ssl_tmp_dir}/kubernetes-key.pem"
      master.vm.provision :file, :source => "#{local_pki_dir}/kubernetes.pem", :destination => "#{kube_ssl_tmp_dir}/kubernetes.pem"
      master.vm.provision :file, :source => "#{local_pki_dir}/kube-proxy-key.pem", :destination => "#{kube_ssl_tmp_dir}/kube-proxy-key.pem"
      master.vm.provision :file, :source => "#{local_pki_dir}/kube-proxy.pem", :destination => "#{kube_ssl_tmp_dir}/kube-proxy.pem"
      master.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_dir} && cp #{kube_ssl_tmp_dir}/* #{kube_ssl_dir}/", :privileged => true

      # Copying CA pem for clients
      master.vm.provision :shell, :inline => "cp #{kube_ssl_tmp_dir}/ca.pem /etc/ssl/certs/kube-ca.pem && update-ca-certificates", :privileged => true

      master.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
      master.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
      master.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      master.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true

    end
  end

  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      kubelet_definition = File.read("templates/kubernetes/kubelet.service")
      kubelet_definition = kubelet_definition.gsub("__DNS_SERVICE_IP__", dns_service_ip)
      kubelet_definition = kubelet_definition.gsub("__NODE_ROLE__", "node")

      # Loading the user_data file to replace placeholders
      user_data = File.read(WORKER_CLOUD_CONFIG_PATH)
      # Replace the placeholders
      user_data = user_data.gsub("_NODE_NAME", vm_name)
      user_data = user_data.gsub("__INITIAL_ETCD_KUBE_CLUSTER__", kube_initial_etcd_cluster)
      user_data = user_data.gsub("__INITIAL_ETCD_CLUSTER__", initial_etcd_cluster)
      user_data = user_data.gsub("__K8S_VERSION__", k8s_version)
      user_data = user_data.gsub("__KUBELET_DEFINITION__", kubelet_definition)
      user_data = user_data.gsub("__KUBE_PROXY_DEFINITION__", File.read("templates/kubernetes/kube-proxy.service"))
      user_data = user_data.gsub("__DOWNLOAD_KUBE__", File.read("templates/kubernetes/download-kube.sh"))
      user_data = user_data.gsub("__TOKEN__", kube_token)
      user_data = user_data.gsub("__CLUSTER_NAME__", kube_cluster_name)
      user_data = user_data.gsub("__KUBE_API_LB_URL__", "https://"+masterIP(1))

      # Writting it to a temp file
      config_file = Tempfile.new('user_data', :binmode => true)
      config_file.write(user_data)
      config_file.close

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
        vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
        config.ignition.config_obj = vb
      end

      worker.vm.provider :virtualbox do |vb|
        config.ignition.hostname = vm_name
        config.ignition.drive_name = "worker-config" + i.to_s
        # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
        # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
        if File.exist?(IGNITION_CONFIG_PATH)
          config.ignition.path = 'config.ign'
        end
      end

      worker.vm.network :private_network, ip: workerIP(i)
      worker.ignition.ip = workerIP(i)
      worker.ignition.hostname = vm_name

      # Copying CA pem for clients
      worker.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_tmp_dir}", :privileged => false
      worker.vm.provision :file, :source => "#{local_pki_dir}/ca.pem", :destination => "#{kube_ssl_tmp_dir}/ca.pem"
      worker.vm.provision :file, :source => "#{local_pki_dir}/kube-proxy-key.pem", :destination => "#{kube_ssl_tmp_dir}/kube-proxy-key.pem"
      worker.vm.provision :file, :source => "#{local_pki_dir}/kube-proxy.pem", :destination => "#{kube_ssl_tmp_dir}/kube-proxy.pem"
      worker.vm.provision :shell, :inline => "cp #{kube_ssl_tmp_dir}/ca.pem /etc/ssl/certs/kube-ca.pem && update-ca-certificates", :privileged => true
      worker.vm.provision :shell, :inline => "mkdir -p #{kube_ssl_dir} && cp #{kube_ssl_tmp_dir}/* #{kube_ssl_dir}/", :privileged => true


      worker.vm.provision :file, :source => config_file.path, :destination => "/tmp/vagrantfile-user-data"
      worker.vm.provision :shell, :inline => "mkdir -p /var/lib/coreos-vagrant/", :privileged => true
      worker.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
      worker.vm.provision :shell, :inline => "coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data", :privileged => true
    end
  end

end
